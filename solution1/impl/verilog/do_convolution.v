// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="do_convolution,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=1736,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=303,HLS_SYN_LUT=594}" *)

module do_convolution (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_out_address0,
        data_out_ce0,
        data_out_we0,
        data_out_d0,
        data_in_address0,
        data_in_ce0,
        data_in_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] data_out_address0;
output   data_out_ce0;
output   data_out_we0;
output  [31:0] data_out_d0;
output  [4:0] data_in_address0;
output   data_in_ce0;
input  [31:0] data_in_q0;
output  [3:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_out_ce0;
reg data_out_we0;
reg data_in_ce0;
reg kernel_ce0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] y_cast_fu_220_p1;
reg   [3:0] y_cast_reg_565;
wire    ap_CS_fsm_state2;
wire   [2:0] y_fu_230_p2;
reg   [2:0] y_reg_574;
wire   [5:0] tmp_s_fu_252_p2;
reg   [5:0] tmp_s_reg_579;
wire   [0:0] exitcond3_fu_224_p2;
wire   [3:0] x_cast_fu_258_p1;
reg   [3:0] x_cast_reg_584;
wire    ap_CS_fsm_state3;
wire   [2:0] x_fu_268_p2;
reg   [2:0] x_reg_593;
wire   [5:0] tmp_3_fu_301_p2;
reg   [5:0] tmp_3_reg_601;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond1_fu_278_p2;
wire   [2:0] i_1_fu_307_p2;
reg   [2:0] i_1_reg_606;
wire   [4:0] tmp_8_fu_325_p2;
reg   [4:0] tmp_8_reg_611;
wire   [0:0] switch8_fu_331_p2;
reg   [0:0] switch8_reg_616;
wire   [0:0] or_cond_fu_358_p2;
reg   [0:0] or_cond_reg_624;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_341_p2;
wire   [2:0] j_2_fu_397_p2;
wire    ap_CS_fsm_state6;
wire   [2:0] i_2_fu_418_p2;
reg   [2:0] i_2_reg_641;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond1_i_fu_407_p2;
wire   [4:0] tmp_12_fu_436_p2;
reg   [4:0] tmp_12_reg_646;
wire   [0:0] tmp4_fu_462_p2;
reg   [0:0] tmp4_reg_651;
wire  signed [3:0] j_i_cast_fu_482_p1;
reg  signed [3:0] j_i_cast_reg_656;
wire    ap_CS_fsm_state8;
wire   [2:0] j_1_fu_492_p2;
reg   [2:0] j_1_reg_664;
wire   [0:0] exitcond_i_fu_486_p2;
wire   [31:0] window_q0;
reg  signed [31:0] window_load_reg_679;
wire    ap_CS_fsm_state9;
reg  signed [31:0] kernel_load_reg_684;
wire   [31:0] tmp_7_i_fu_513_p2;
reg   [31:0] tmp_7_i_reg_689;
wire    ap_CS_fsm_state10;
wire   [31:0] result_1_fu_557_p3;
wire    ap_CS_fsm_state11;
reg   [3:0] window_address0;
reg    window_ce0;
reg    window_we0;
reg   [2:0] y_assign_1_reg_127;
wire   [0:0] exitcond2_fu_262_p2;
reg   [2:0] x_assign_1_reg_138;
reg  signed [2:0] i_reg_150;
reg  signed [2:0] j_reg_161;
reg   [31:0] val_out_reg_173;
reg  signed [2:0] i_i_reg_186;
reg   [31:0] result_1_i_reg_197;
reg  signed [2:0] j_i_reg_209;
wire  signed [63:0] tmp_18_cast_fu_372_p1;
wire  signed [63:0] tmp_19_cast_fu_392_p1;
wire   [63:0] tmp_15_cast_fu_477_p1;
wire  signed [63:0] tmp_20_cast_fu_507_p1;
wire   [4:0] tmp_4_fu_240_p3;
wire   [5:0] tmp_cast_fu_236_p1;
wire   [5:0] p_shl_cast_fu_248_p1;
wire  signed [3:0] i_cast_fu_274_p1;
wire  signed [3:0] y_assign_fu_284_p2;
wire  signed [5:0] tmp_2_cast_fu_289_p1;
wire   [5:0] tmp_2_fu_293_p3;
wire   [4:0] tmp_6_fu_317_p3;
wire   [4:0] tmp_3_cast_fu_313_p1;
wire  signed [3:0] j_cast_fu_337_p1;
wire   [3:0] x_assign_fu_347_p2;
wire   [0:0] switch_fu_352_p2;
wire   [5:0] tmp_6_cast_fu_363_p1;
wire   [5:0] tmp_13_fu_367_p2;
wire   [2:0] tmp_7_fu_377_p2;
wire   [4:0] tmp_8_cast_fu_383_p1;
wire   [4:0] tmp_14_fu_387_p2;
wire  signed [3:0] i_i_cast_fu_403_p1;
wire   [4:0] tmp_11_fu_428_p3;
wire   [4:0] tmp_2_i_cast_fu_424_p1;
wire   [3:0] y_assign_2_fu_413_p2;
wire   [0:0] tmp_fu_442_p3;
wire   [0:0] tmp_i_i_fu_456_p2;
wire   [0:0] rev_fu_450_p2;
wire   [5:0] tmp_cast_10_fu_468_p1;
wire   [5:0] tmp_10_fu_472_p2;
wire   [4:0] tmp_6_i_cast_fu_498_p1;
wire   [4:0] tmp_16_fu_502_p2;
wire   [3:0] x_assign_2_fu_517_p2;
wire   [0:0] tmp_15_fu_521_p3;
wire   [0:0] tmp_1_i_i_fu_535_p2;
wire   [0:0] rev7_fu_529_p2;
wire   [0:0] tmp5_fu_541_p2;
wire   [0:0] p_i_i_fu_547_p2;
wire   [31:0] result_fu_552_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

do_convolution_wibkb #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
window_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(window_address0),
    .ce0(window_ce0),
    .we0(window_we0),
    .d0(data_in_q0),
    .q0(window_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_i_reg_186 <= 3'd7;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond_i_fu_486_p2 == 1'd1))) begin
        i_i_reg_186 <= i_2_reg_641;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_reg_150 <= i_1_reg_606;
    end else if (((exitcond2_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_150 <= 3'd7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_i_reg_209 <= j_1_reg_664;
    end else if (((exitcond1_i_fu_407_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        j_i_reg_209 <= 3'd7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_161 <= j_2_fu_397_p2;
    end else if (((exitcond1_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_161 <= 3'd7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        result_1_i_reg_197 <= result_1_fu_557_p3;
    end else if (((exitcond1_i_fu_407_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        result_1_i_reg_197 <= val_out_reg_173;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        val_out_reg_173 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond_i_fu_486_p2 == 1'd1))) begin
        val_out_reg_173 <= result_1_i_reg_197;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond1_i_fu_407_p2 == 1'd1))) begin
        x_assign_1_reg_138 <= x_reg_593;
    end else if (((exitcond3_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        x_assign_1_reg_138 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_262_p2 == 1'd1))) begin
        y_assign_1_reg_127 <= y_reg_574;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        y_assign_1_reg_127 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_606 <= i_1_fu_307_p2;
        switch8_reg_616 <= switch8_fu_331_p2;
        tmp_3_reg_601 <= tmp_3_fu_301_p2;
        tmp_8_reg_611 <= tmp_8_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i_fu_407_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        i_2_reg_641 <= i_2_fu_418_p2;
        tmp4_reg_651 <= tmp4_fu_462_p2;
        tmp_12_reg_646 <= tmp_12_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_486_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        j_1_reg_664 <= j_1_fu_492_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_i_cast_reg_656 <= j_i_cast_fu_482_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        kernel_load_reg_684 <= kernel_q0;
        window_load_reg_679 <= window_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        or_cond_reg_624 <= or_cond_fu_358_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_7_i_reg_689 <= tmp_7_i_fu_513_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_s_reg_579 <= tmp_s_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_cast_reg_584[2 : 0] <= x_cast_fu_258_p1[2 : 0];
        x_reg_593 <= x_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_cast_reg_565[2 : 0] <= y_cast_fu_220_p1[2 : 0];
        y_reg_574 <= y_fu_230_p2;
    end
end

always @ (*) begin
    if (((exitcond3_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_in_ce0 = 1'b1;
    end else begin
        data_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        data_out_ce0 = 1'b1;
    end else begin
        data_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond1_i_fu_407_p2 == 1'd1))) begin
        data_out_we0 = 1'b1;
    end else begin
        data_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        window_address0 = tmp_20_cast_fu_507_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        window_address0 = tmp_19_cast_fu_392_p1;
    end else begin
        window_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        window_ce0 = 1'b1;
    end else begin
        window_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond_reg_624 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        window_we0 = 1'b1;
    end else begin
        window_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_262_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond1_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond1_i_fu_407_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond_i_fu_486_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign data_in_address0 = tmp_18_cast_fu_372_p1;

assign data_out_address0 = tmp_15_cast_fu_477_p1;

assign data_out_d0 = val_out_reg_173;

assign exitcond1_fu_278_p2 = ((i_reg_150 == 3'd2) ? 1'b1 : 1'b0);

assign exitcond1_i_fu_407_p2 = ((i_i_reg_186 == 3'd2) ? 1'b1 : 1'b0);

assign exitcond2_fu_262_p2 = ((x_assign_1_reg_138 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond3_fu_224_p2 = ((y_assign_1_reg_127 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond_fu_341_p2 = ((j_reg_161 == 3'd2) ? 1'b1 : 1'b0);

assign exitcond_i_fu_486_p2 = ((j_i_reg_209 == 3'd2) ? 1'b1 : 1'b0);

assign i_1_fu_307_p2 = ($signed(i_reg_150) + $signed(3'd1));

assign i_2_fu_418_p2 = ($signed(i_i_reg_186) + $signed(3'd1));

assign i_cast_fu_274_p1 = i_reg_150;

assign i_i_cast_fu_403_p1 = i_i_reg_186;

assign j_1_fu_492_p2 = ($signed(j_i_reg_209) + $signed(3'd1));

assign j_2_fu_397_p2 = ($signed(j_reg_161) + $signed(3'd1));

assign j_cast_fu_337_p1 = j_reg_161;

assign j_i_cast_fu_482_p1 = j_i_reg_209;

assign kernel_address0 = tmp_20_cast_fu_507_p1;

assign or_cond_fu_358_p2 = (switch_fu_352_p2 | switch8_reg_616);

assign p_i_i_fu_547_p2 = (tmp5_fu_541_p2 & tmp4_reg_651);

assign p_shl_cast_fu_248_p1 = tmp_4_fu_240_p3;

assign result_1_fu_557_p3 = ((p_i_i_fu_547_p2[0:0] === 1'b1) ? result_fu_552_p2 : result_1_i_reg_197);

assign result_fu_552_p2 = (tmp_7_i_reg_689 + result_1_i_reg_197);

assign rev7_fu_529_p2 = (tmp_15_fu_521_p3 ^ 1'd1);

assign rev_fu_450_p2 = (tmp_fu_442_p3 ^ 1'd1);

assign switch8_fu_331_p2 = ((y_assign_fu_284_p2 > 4'd4) ? 1'b1 : 1'b0);

assign switch_fu_352_p2 = ((x_assign_fu_347_p2 > 4'd4) ? 1'b1 : 1'b0);

assign tmp4_fu_462_p2 = (tmp_i_i_fu_456_p2 & rev_fu_450_p2);

assign tmp5_fu_541_p2 = (tmp_1_i_i_fu_535_p2 & rev7_fu_529_p2);

assign tmp_10_fu_472_p2 = (tmp_s_reg_579 + tmp_cast_10_fu_468_p1);

assign tmp_11_fu_428_p3 = {{i_2_fu_418_p2}, {2'd0}};

assign tmp_12_fu_436_p2 = (tmp_11_fu_428_p3 - tmp_2_i_cast_fu_424_p1);

assign tmp_13_fu_367_p2 = (tmp_3_reg_601 + tmp_6_cast_fu_363_p1);

assign tmp_14_fu_387_p2 = (tmp_8_reg_611 + tmp_8_cast_fu_383_p1);

assign tmp_15_cast_fu_477_p1 = tmp_10_fu_472_p2;

assign tmp_15_fu_521_p3 = x_assign_2_fu_517_p2[32'd3];

assign tmp_16_fu_502_p2 = (tmp_12_reg_646 + tmp_6_i_cast_fu_498_p1);

assign tmp_18_cast_fu_372_p1 = $signed(tmp_13_fu_367_p2);

assign tmp_19_cast_fu_392_p1 = $signed(tmp_14_fu_387_p2);

assign tmp_1_i_i_fu_535_p2 = (($signed(x_assign_2_fu_517_p2) < $signed(4'd5)) ? 1'b1 : 1'b0);

assign tmp_20_cast_fu_507_p1 = $signed(tmp_16_fu_502_p2);

assign tmp_2_cast_fu_289_p1 = y_assign_fu_284_p2;

assign tmp_2_fu_293_p3 = {{y_assign_fu_284_p2}, {2'd0}};

assign tmp_2_i_cast_fu_424_p1 = i_2_fu_418_p2;

assign tmp_3_cast_fu_313_p1 = i_1_fu_307_p2;

assign tmp_3_fu_301_p2 = ($signed(tmp_2_cast_fu_289_p1) + $signed(tmp_2_fu_293_p3));

assign tmp_4_fu_240_p3 = {{y_assign_1_reg_127}, {2'd0}};

assign tmp_6_cast_fu_363_p1 = x_assign_fu_347_p2;

assign tmp_6_fu_317_p3 = {{i_1_fu_307_p2}, {2'd0}};

assign tmp_6_i_cast_fu_498_p1 = j_1_fu_492_p2;

assign tmp_7_fu_377_p2 = ($signed(j_reg_161) + $signed(3'd1));

assign tmp_7_i_fu_513_p2 = ($signed(kernel_load_reg_684) * $signed(window_load_reg_679));

assign tmp_8_cast_fu_383_p1 = tmp_7_fu_377_p2;

assign tmp_8_fu_325_p2 = (tmp_6_fu_317_p3 - tmp_3_cast_fu_313_p1);

assign tmp_cast_10_fu_468_p1 = x_assign_1_reg_138;

assign tmp_cast_fu_236_p1 = y_assign_1_reg_127;

assign tmp_fu_442_p3 = y_assign_2_fu_413_p2[32'd3];

assign tmp_i_i_fu_456_p2 = (($signed(y_assign_2_fu_413_p2) < $signed(4'd5)) ? 1'b1 : 1'b0);

assign tmp_s_fu_252_p2 = (tmp_cast_fu_236_p1 + p_shl_cast_fu_248_p1);

assign x_assign_2_fu_517_p2 = ($signed(x_cast_reg_584) + $signed(j_i_cast_reg_656));

assign x_assign_fu_347_p2 = ($signed(j_cast_fu_337_p1) + $signed(x_cast_reg_584));

assign x_cast_fu_258_p1 = x_assign_1_reg_138;

assign x_fu_268_p2 = (x_assign_1_reg_138 + 3'd1);

assign y_assign_2_fu_413_p2 = ($signed(y_cast_reg_565) + $signed(i_i_cast_fu_403_p1));

assign y_assign_fu_284_p2 = ($signed(i_cast_fu_274_p1) + $signed(y_cast_reg_565));

assign y_cast_fu_220_p1 = y_assign_1_reg_127;

assign y_fu_230_p2 = (y_assign_1_reg_127 + 3'd1);

always @ (posedge ap_clk) begin
    y_cast_reg_565[3] <= 1'b0;
    x_cast_reg_584[3] <= 1'b0;
end

endmodule //do_convolution
