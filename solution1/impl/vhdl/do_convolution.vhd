-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity do_convolution is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_out_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_out_ce0 : OUT STD_LOGIC;
    data_out_we0 : OUT STD_LOGIC;
    data_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_in_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_in_ce0 : OUT STD_LOGIC;
    data_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of do_convolution is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "do_convolution,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=1736,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=303,HLS_SYN_LUT=594}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal y_cast_fu_220_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_cast_reg_565 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal y_fu_230_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_reg_574 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_252_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_reg_579 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond3_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_cast_fu_258_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_cast_reg_584 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal x_fu_268_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_reg_593 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_301_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_reg_601 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond1_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_307_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_606 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_325_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_reg_611 : STD_LOGIC_VECTOR (4 downto 0);
    signal switch8_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal switch8_reg_616 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_624 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_397_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_2_fu_418_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_641 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond1_i_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_436_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_reg_646 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp4_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_reg_651 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_i_cast_fu_482_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_i_cast_reg_656 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal j_1_fu_492_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_664 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_i_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_load_reg_679 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal kernel_load_reg_684 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_fu_513_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_reg_689 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal result_1_fu_557_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal window_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal window_ce0 : STD_LOGIC;
    signal window_we0 : STD_LOGIC;
    signal y_assign_1_reg_127 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond2_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_1_reg_138 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_150 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_161 : STD_LOGIC_VECTOR (2 downto 0);
    signal val_out_reg_173 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_186 : STD_LOGIC_VECTOR (2 downto 0);
    signal result_1_i_reg_197 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_i_reg_209 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_18_cast_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_cast_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_cast_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_cast_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_240_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_236_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_248_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_cast_fu_274_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_assign_fu_284_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_cast_fu_289_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_293_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_317_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_cast_fu_313_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_cast_fu_337_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_assign_fu_347_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal switch_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_cast_fu_363_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_fu_367_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_377_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_cast_fu_383_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_fu_387_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_i_cast_fu_403_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_428_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_i_cast_fu_424_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_assign_2_fu_413_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_442_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_10_fu_468_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_fu_472_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_i_cast_fu_498_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_fu_502_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_assign_2_fu_517_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_15_fu_521_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_i_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev7_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_i_i_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_fu_552_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component do_convolution_wibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    window_U : component do_convolution_wibkb
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => window_address0,
        ce0 => window_ce0,
        we0 => window_we0,
        d0 => data_in_q0,
        q0 => window_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_i_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_i_reg_186 <= ap_const_lv3_7;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_i_fu_486_p2 = ap_const_lv1_1))) then 
                i_i_reg_186 <= i_2_reg_641;
            end if; 
        end if;
    end process;

    i_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_reg_150 <= i_1_reg_606;
            elsif (((exitcond2_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_150 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;

    j_i_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_i_reg_209 <= j_1_reg_664;
            elsif (((exitcond1_i_fu_407_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                j_i_reg_209 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;

    j_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_reg_161 <= j_2_fu_397_p2;
            elsif (((exitcond1_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_reg_161 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;

    result_1_i_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                result_1_i_reg_197 <= result_1_fu_557_p3;
            elsif (((exitcond1_i_fu_407_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                result_1_i_reg_197 <= val_out_reg_173;
            end if; 
        end if;
    end process;

    val_out_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                val_out_reg_173 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_i_fu_486_p2 = ap_const_lv1_1))) then 
                val_out_reg_173 <= result_1_i_reg_197;
            end if; 
        end if;
    end process;

    x_assign_1_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_i_fu_407_p2 = ap_const_lv1_1))) then 
                x_assign_1_reg_138 <= x_reg_593;
            elsif (((exitcond3_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_assign_1_reg_138 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    y_assign_1_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_262_p2 = ap_const_lv1_1))) then 
                y_assign_1_reg_127 <= y_reg_574;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                y_assign_1_reg_127 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                i_1_reg_606 <= i_1_fu_307_p2;
                switch8_reg_616 <= switch8_fu_331_p2;
                tmp_3_reg_601 <= tmp_3_fu_301_p2;
                tmp_8_reg_611 <= tmp_8_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_fu_407_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                i_2_reg_641 <= i_2_fu_418_p2;
                tmp4_reg_651 <= tmp4_fu_462_p2;
                tmp_12_reg_646 <= tmp_12_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_486_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                j_1_reg_664 <= j_1_fu_492_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                j_i_cast_reg_656 <= j_i_cast_fu_482_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                kernel_load_reg_684 <= kernel_q0;
                window_load_reg_679 <= window_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                or_cond_reg_624 <= or_cond_fu_358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_7_i_reg_689 <= tmp_7_i_fu_513_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_s_reg_579 <= tmp_s_fu_252_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    x_cast_reg_584(2 downto 0) <= x_cast_fu_258_p1(2 downto 0);
                x_reg_593 <= x_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    y_cast_reg_565(2 downto 0) <= y_cast_fu_220_p1(2 downto 0);
                y_reg_574 <= y_fu_230_p2;
            end if;
        end if;
    end process;
    y_cast_reg_565(3) <= '0';
    x_cast_reg_584(3) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_224_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond1_fu_278_p2, ap_CS_fsm_state5, exitcond_fu_341_p2, ap_CS_fsm_state7, exitcond1_i_fu_407_p2, ap_CS_fsm_state8, exitcond_i_fu_486_p2, exitcond2_fu_262_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond3_fu_224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_262_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond1_fu_278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_i_fu_407_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_i_fu_486_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_224_p2)
    begin
        if (((exitcond3_fu_224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_224_p2)
    begin
        if (((exitcond3_fu_224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_in_address0 <= tmp_18_cast_fu_372_p1(5 - 1 downto 0);

    data_in_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_in_ce0 <= ap_const_logic_1;
        else 
            data_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_out_address0 <= tmp_15_cast_fu_477_p1(5 - 1 downto 0);

    data_out_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_out_ce0 <= ap_const_logic_1;
        else 
            data_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_out_d0 <= val_out_reg_173;

    data_out_we0_assign_proc : process(ap_CS_fsm_state7, exitcond1_i_fu_407_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_i_fu_407_p2 = ap_const_lv1_1))) then 
            data_out_we0 <= ap_const_logic_1;
        else 
            data_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_278_p2 <= "1" when (i_reg_150 = ap_const_lv3_2) else "0";
    exitcond1_i_fu_407_p2 <= "1" when (i_i_reg_186 = ap_const_lv3_2) else "0";
    exitcond2_fu_262_p2 <= "1" when (x_assign_1_reg_138 = ap_const_lv3_5) else "0";
    exitcond3_fu_224_p2 <= "1" when (y_assign_1_reg_127 = ap_const_lv3_5) else "0";
    exitcond_fu_341_p2 <= "1" when (j_reg_161 = ap_const_lv3_2) else "0";
    exitcond_i_fu_486_p2 <= "1" when (j_i_reg_209 = ap_const_lv3_2) else "0";
    i_1_fu_307_p2 <= std_logic_vector(signed(i_reg_150) + signed(ap_const_lv3_1));
    i_2_fu_418_p2 <= std_logic_vector(signed(i_i_reg_186) + signed(ap_const_lv3_1));
        i_cast_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_reg_150),4));

        i_i_cast_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_i_reg_186),4));

    j_1_fu_492_p2 <= std_logic_vector(signed(j_i_reg_209) + signed(ap_const_lv3_1));
    j_2_fu_397_p2 <= std_logic_vector(signed(j_reg_161) + signed(ap_const_lv3_1));
        j_cast_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_reg_161),4));

        j_i_cast_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_i_reg_209),4));

    kernel_address0 <= tmp_20_cast_fu_507_p1(4 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_fu_358_p2 <= (switch_fu_352_p2 or switch8_reg_616);
    p_i_i_fu_547_p2 <= (tmp5_fu_541_p2 and tmp4_reg_651);
    p_shl_cast_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_240_p3),6));
    result_1_fu_557_p3 <= 
        result_fu_552_p2 when (p_i_i_fu_547_p2(0) = '1') else 
        result_1_i_reg_197;
    result_fu_552_p2 <= std_logic_vector(unsigned(tmp_7_i_reg_689) + unsigned(result_1_i_reg_197));
    rev7_fu_529_p2 <= (tmp_15_fu_521_p3 xor ap_const_lv1_1);
    rev_fu_450_p2 <= (tmp_fu_442_p3 xor ap_const_lv1_1);
    switch8_fu_331_p2 <= "1" when (unsigned(y_assign_fu_284_p2) > unsigned(ap_const_lv4_4)) else "0";
    switch_fu_352_p2 <= "1" when (unsigned(x_assign_fu_347_p2) > unsigned(ap_const_lv4_4)) else "0";
    tmp4_fu_462_p2 <= (tmp_i_i_fu_456_p2 and rev_fu_450_p2);
    tmp5_fu_541_p2 <= (tmp_1_i_i_fu_535_p2 and rev7_fu_529_p2);
    tmp_10_fu_472_p2 <= std_logic_vector(unsigned(tmp_s_reg_579) + unsigned(tmp_cast_10_fu_468_p1));
    tmp_11_fu_428_p3 <= (i_2_fu_418_p2 & ap_const_lv2_0);
    tmp_12_fu_436_p2 <= std_logic_vector(unsigned(tmp_11_fu_428_p3) - unsigned(tmp_2_i_cast_fu_424_p1));
    tmp_13_fu_367_p2 <= std_logic_vector(unsigned(tmp_3_reg_601) + unsigned(tmp_6_cast_fu_363_p1));
    tmp_14_fu_387_p2 <= std_logic_vector(unsigned(tmp_8_reg_611) + unsigned(tmp_8_cast_fu_383_p1));
    tmp_15_cast_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_472_p2),64));
    tmp_15_fu_521_p3 <= x_assign_2_fu_517_p2(3 downto 3);
    tmp_16_fu_502_p2 <= std_logic_vector(unsigned(tmp_12_reg_646) + unsigned(tmp_6_i_cast_fu_498_p1));
        tmp_18_cast_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_367_p2),64));

        tmp_19_cast_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_fu_387_p2),64));

    tmp_1_i_i_fu_535_p2 <= "1" when (signed(x_assign_2_fu_517_p2) < signed(ap_const_lv4_5)) else "0";
        tmp_20_cast_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_fu_502_p2),64));

        tmp_2_cast_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_assign_fu_284_p2),6));

    tmp_2_fu_293_p3 <= (y_assign_fu_284_p2 & ap_const_lv2_0);
    tmp_2_i_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_fu_418_p2),5));
    tmp_3_cast_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_307_p2),5));
    tmp_3_fu_301_p2 <= std_logic_vector(signed(tmp_2_cast_fu_289_p1) + signed(tmp_2_fu_293_p3));
    tmp_4_fu_240_p3 <= (y_assign_1_reg_127 & ap_const_lv2_0);
    tmp_6_cast_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_assign_fu_347_p2),6));
    tmp_6_fu_317_p3 <= (i_1_fu_307_p2 & ap_const_lv2_0);
    tmp_6_i_cast_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_fu_492_p2),5));
    tmp_7_fu_377_p2 <= std_logic_vector(signed(j_reg_161) + signed(ap_const_lv3_1));
    tmp_7_i_fu_513_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(kernel_load_reg_684) * signed(window_load_reg_679))), 32));
    tmp_8_cast_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_377_p2),5));
    tmp_8_fu_325_p2 <= std_logic_vector(unsigned(tmp_6_fu_317_p3) - unsigned(tmp_3_cast_fu_313_p1));
    tmp_cast_10_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_assign_1_reg_138),6));
    tmp_cast_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_assign_1_reg_127),6));
    tmp_fu_442_p3 <= y_assign_2_fu_413_p2(3 downto 3);
    tmp_i_i_fu_456_p2 <= "1" when (signed(y_assign_2_fu_413_p2) < signed(ap_const_lv4_5)) else "0";
    tmp_s_fu_252_p2 <= std_logic_vector(unsigned(tmp_cast_fu_236_p1) + unsigned(p_shl_cast_fu_248_p1));

    window_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, tmp_19_cast_fu_392_p1, tmp_20_cast_fu_507_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            window_address0 <= tmp_20_cast_fu_507_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            window_address0 <= tmp_19_cast_fu_392_p1(4 - 1 downto 0);
        else 
            window_address0 <= "XXXX";
        end if; 
    end process;


    window_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            window_ce0 <= ap_const_logic_1;
        else 
            window_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    window_we0_assign_proc : process(or_cond_reg_624, ap_CS_fsm_state6)
    begin
        if (((or_cond_reg_624 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            window_we0 <= ap_const_logic_1;
        else 
            window_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_assign_2_fu_517_p2 <= std_logic_vector(unsigned(x_cast_reg_584) + unsigned(j_i_cast_reg_656));
    x_assign_fu_347_p2 <= std_logic_vector(signed(j_cast_fu_337_p1) + signed(x_cast_reg_584));
    x_cast_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_assign_1_reg_138),4));
    x_fu_268_p2 <= std_logic_vector(unsigned(x_assign_1_reg_138) + unsigned(ap_const_lv3_1));
    y_assign_2_fu_413_p2 <= std_logic_vector(unsigned(y_cast_reg_565) + unsigned(i_i_cast_fu_403_p1));
    y_assign_fu_284_p2 <= std_logic_vector(signed(i_cast_fu_274_p1) + signed(y_cast_reg_565));
    y_cast_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_assign_1_reg_127),4));
    y_fu_230_p2 <= std_logic_vector(unsigned(y_assign_1_reg_127) + unsigned(ap_const_lv3_1));
end behav;
