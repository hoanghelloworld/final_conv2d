-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity do_convolution is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_out_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_out_ce0 : OUT STD_LOGIC;
    data_out_we0 : OUT STD_LOGIC;
    data_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_in_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_in_ce0 : OUT STD_LOGIC;
    data_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_in_ce1 : OUT STD_LOGIC;
    data_in_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce1 : OUT STD_LOGIC;
    kernel_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of do_convolution is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "do_convolution,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.557000,HLS_SYN_LAT=129,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=27,HLS_SYN_FF=1120,HLS_SYN_LUT=1591}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_276 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_assign_1_reg_287 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_assign_1_reg_298 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal exitcond_flatten_reg_974 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal tmp_i4_mid2_reg_1015 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_313 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_974_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_347_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_next_reg_978 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_assign_1_mid2_fu_359_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_assign_1_mid2_reg_983 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid2_fu_367_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid2_reg_989 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_399_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_reg_996 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i_mid2_fu_411_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_mid2_reg_1001 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_2_mid2_fu_425_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_2_mid2_reg_1009 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_i4_mid2_fu_439_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i4_mid2_reg_1015_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_cast_fu_453_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_cast_reg_1023 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_0_1_cast_fu_468_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_0_1_cast_reg_1034 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_503_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_reg_1045 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_i_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_reg_1051 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_i_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_i_reg_1058 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_0_0_1_3_fu_529_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_0_0_1_3_reg_1068 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_0_1_1_4_fu_537_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_0_1_1_4_reg_1073 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_544_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_reg_1078 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_0_2_cast_fu_549_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_0_2_cast_reg_1084 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_599_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_reg_1095 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_cast_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_cast_reg_1100 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_613_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_reg_1110 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_i4_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i4_reg_1115 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_i_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_i_reg_1122 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_637_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_reg_1132 : STD_LOGIC_VECTOR (5 downto 0);
    signal window_0_2_1_5_fu_642_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_0_2_1_5_reg_1137 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_1_0_1_6_fu_650_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_1_0_1_6_reg_1142 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_fu_657_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_reg_1147 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_0_1_i_fu_662_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_0_1_i_reg_1152 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_1_1_reg_1167 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_1_2_1_7_fu_688_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_1_2_1_7_reg_1172 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_2_0_1_i_fu_706_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_2_0_1_i_reg_1177 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_0_2_i_fu_713_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_0_2_i_reg_1183 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_1_i_fu_718_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_1_i_reg_1188 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond1_i1_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_i1_reg_1198 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_2_0_1_8_fu_742_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_2_0_1_8_reg_1203 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_2_1_1_9_fu_750_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_2_1_1_9_reg_1208 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_2_0_2_i_fu_761_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_2_0_2_i_reg_1213 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_1_1_i_fu_767_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_1_1_i_reg_1219 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_1_2_i_fu_772_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_1_2_i_reg_1224 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_i1_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_i1_reg_1229 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_2_2_1_10_fu_794_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_2_2_1_10_reg_1234 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_2_1_2_i_fu_822_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_2_1_2_i_reg_1239 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_2_i_fu_829_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_2_i_reg_1246 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_2_1_i_fu_834_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_2_1_i_reg_1251 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_2_2_1_i_fu_859_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_2_2_1_i_reg_1256 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_2_2_i_fu_865_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_2_2_i_reg_1262 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_280_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_y_assign_1_phi_fu_291_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_x_assign_1_phi_fu_302_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_cast_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_cast_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_cast_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_15_cast_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal tmp_16_cast_fu_632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_cast_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal tmp_14_cast_fu_684_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_cast_fu_734_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal window_0_0_1_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_0_1_1_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_0_2_1_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_1_0_1_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_1_2_1_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_2_0_1_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_2_1_1_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_2_2_1_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_fu_329_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_assign_fu_317_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_mid2_v_fu_375_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_387_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl1_cast_fu_395_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_mid2_cast_fu_383_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i_mid1_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_assign_2_mid1_fu_419_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_i4_mid1_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i4_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_fu_447_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_457_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_fu_472_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_492_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_cast_fu_499_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_mid2_cast_fu_489_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_519_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_fu_553_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_582_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_589_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_2_mid2_cast_fu_579_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_593_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_604_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_fu_628_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal result_2_i_fu_695_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_3_0_1_i_fu_701_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_3_0_2_i_fu_757_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_3_1_i_fu_802_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_2_1_i_fu_806_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_3_1_1_i_fu_812_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_3_1_2_i_fu_817_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_3_2_i_fu_844_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_2_2_i_fu_848_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_3_2_1_i_fu_854_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_3_2_2_i_fu_870_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_276 <= indvar_flatten_next_reg_978;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_276 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    x_assign_1_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                x_assign_1_reg_298 <= x_reg_1078;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x_assign_1_reg_298 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    y_assign_1_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                y_assign_1_reg_287 <= tmp_mid2_reg_989;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                y_assign_1_reg_287 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten_reg_974 <= exitcond_flatten_fu_341_p2;
                exitcond_flatten_reg_974_pp0_iter1_reg <= exitcond_flatten_reg_974;
                tmp_i4_mid2_reg_1015_pp0_iter1_reg <= tmp_i4_mid2_reg_1015;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                indvar_flatten_next_reg_978 <= indvar_flatten_next_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                or_cond1_i1_reg_1198 <= or_cond1_i1_fu_738_p2;
                result_2_0_2_i_reg_1213 <= result_2_0_2_i_fu_761_p3;
                tmp_7_1_1_i_reg_1219 <= tmp_7_1_1_i_fu_767_p2;
                window_2_0_1_8_reg_1203 <= window_2_0_1_8_fu_742_p3;
                window_2_1_1_9_reg_1208 <= window_2_1_1_9_fu_750_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                or_cond1_i_reg_1058 <= or_cond1_i_fu_514_p2;
                tmp_3_reg_1045 <= tmp_3_fu_503_p2;
                    tmp_6_0_2_cast_reg_1084(2 downto 0) <= tmp_6_0_2_cast_fu_549_p1(2 downto 0);
                tmp_9_i_reg_1051 <= tmp_9_i_fu_509_p2;
                window_0_0_1_3_reg_1068 <= window_0_0_1_3_fu_529_p3;
                window_0_1_1_4_reg_1073 <= window_0_1_1_4_fu_537_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_i1_reg_1229 <= p_i1_fu_790_p2;
                result_2_1_2_i_reg_1239 <= result_2_1_2_i_fu_822_p3;
                window_2_2_1_10_reg_1234 <= window_2_2_1_10_fu_794_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                p_i_reg_1122 <= p_i_fu_623_p2;
                    tmp_12_cast_reg_1100(5 downto 0) <= tmp_12_cast_fu_608_p1(5 downto 0);
                tmp_14_reg_1132 <= tmp_14_fu_637_p2;
                tmp_1_i4_reg_1115 <= tmp_1_i4_fu_618_p2;
                tmp_6_reg_1095 <= tmp_6_fu_599_p2;
                window_0_2_1_5_reg_1137 <= window_0_2_1_5_fu_642_p3;
                window_1_0_1_6_reg_1142 <= window_1_0_1_6_fu_650_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (tmp_i4_mid2_reg_1015 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_309 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (tmp_i4_mid2_reg_1015 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_313 <= kernel_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                result_2_0_1_i_reg_1177 <= result_2_0_1_i_fu_706_p3;
                window_1_2_1_7_reg_1172 <= window_1_2_1_7_fu_688_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_974_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                result_2_2_1_i_reg_1256 <= result_2_2_1_i_fu_859_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (tmp_i4_mid2_reg_1015 = ap_const_lv1_1))) then
                tmp_11_reg_1110 <= tmp_11_fu_613_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_2_2_mid2_reg_1009 <= tmp_2_2_mid2_fu_425_p3;
                tmp_5_reg_996 <= tmp_5_fu_399_p2;
                    tmp_6_0_1_cast_reg_1034(2 downto 0) <= tmp_6_0_1_cast_fu_468_p1(2 downto 0);
                tmp_6_cast_reg_1023 <= tmp_6_cast_fu_453_p1;
                tmp_i4_mid2_reg_1015 <= tmp_i4_mid2_fu_439_p3;
                tmp_i_mid2_reg_1001 <= tmp_i_mid2_fu_411_p3;
                x_assign_1_mid2_reg_983 <= x_assign_1_mid2_fu_359_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (tmp_i_mid2_reg_1001 = ap_const_lv1_1))) then
                tmp_7_0_1_i_reg_1152 <= tmp_7_0_1_i_fu_662_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (p_i_reg_1122 = ap_const_lv1_1))) then
                tmp_7_0_2_i_reg_1183 <= tmp_7_0_2_i_fu_713_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (tmp_1_i4_reg_1115 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                tmp_7_1_2_i_reg_1224 <= tmp_7_1_2_i_fu_772_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_9_i_reg_1051 = ap_const_lv1_1))) then
                tmp_7_1_i_reg_1188 <= tmp_7_1_i_fu_718_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_i4_mid2_reg_1015 = ap_const_lv1_1))) then
                tmp_7_2_1_i_reg_1251 <= tmp_7_2_1_i_fu_834_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_974_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (p_i1_reg_1229 = ap_const_lv1_1))) then
                tmp_7_2_2_i_reg_1262 <= tmp_7_2_2_i_fu_865_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond1_i1_reg_1198 = ap_const_lv1_1) and (tmp_i4_mid2_reg_1015 = ap_const_lv1_1))) then
                tmp_7_2_i_reg_1246 <= tmp_7_2_i_fu_829_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (or_cond1_i_reg_1058 = ap_const_lv1_1) and (tmp_i_mid2_reg_1001 = ap_const_lv1_1))) then
                tmp_7_i_reg_1147 <= tmp_7_i_fu_657_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_341_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_mid2_reg_989 <= tmp_mid2_fu_367_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                window_0_0_1_fu_74 <= window_0_0_1_3_fu_529_p3;
                window_0_1_1_fu_78 <= window_0_1_1_4_fu_537_p3;
                x_reg_1078 <= x_fu_544_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                window_0_2_1_fu_82 <= window_0_2_1_5_fu_642_p3;
                window_1_0_1_fu_86 <= window_1_0_1_6_fu_650_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                window_1_1_reg_1167 <= data_in_q0;
                window_1_2_1_fu_90 <= window_1_2_1_7_fu_688_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                window_2_0_1_fu_94 <= window_2_0_1_8_fu_742_p3;
                window_2_1_1_fu_98 <= window_2_1_1_9_fu_750_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                window_2_2_1_fu_102 <= window_2_2_1_10_fu_794_p3;
            end if;
        end if;
    end process;
    tmp_6_0_1_cast_reg_1034(5 downto 3) <= "000";
    tmp_6_0_2_cast_reg_1084(5 downto 3) <= "000";
    tmp_12_cast_reg_1100(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, exitcond_flatten_fu_341_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (exitcond_flatten_fu_341_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (exitcond_flatten_fu_341_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_341_p2)
    begin
        if ((exitcond_flatten_fu_341_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_280_p4_assign_proc : process(indvar_flatten_reg_276, exitcond_flatten_reg_974, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, indvar_flatten_next_reg_978, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_280_p4 <= indvar_flatten_next_reg_978;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_280_p4 <= indvar_flatten_reg_276;
        end if; 
    end process;


    ap_phi_mux_x_assign_1_phi_fu_302_p4_assign_proc : process(x_assign_1_reg_298, exitcond_flatten_reg_974, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, x_reg_1078, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_x_assign_1_phi_fu_302_p4 <= x_reg_1078;
        else 
            ap_phi_mux_x_assign_1_phi_fu_302_p4 <= x_assign_1_reg_298;
        end if; 
    end process;


    ap_phi_mux_y_assign_1_phi_fu_291_p4_assign_proc : process(y_assign_1_reg_287, exitcond_flatten_reg_974, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_mid2_reg_989, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_974 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_y_assign_1_phi_fu_291_p4 <= tmp_mid2_reg_989;
        else 
            ap_phi_mux_y_assign_1_phi_fu_291_p4 <= y_assign_1_reg_287;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data_in_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, tmp_12_cast_fu_608_p1, ap_block_pp0_stage0, tmp_9_cast_fu_463_p1, ap_block_pp0_stage1, tmp_15_cast_fu_558_p1, ap_block_pp0_stage2, tmp_11_cast_fu_680_p1, ap_block_pp0_stage3, tmp_17_cast_fu_734_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                data_in_address0 <= tmp_17_cast_fu_734_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                data_in_address0 <= tmp_11_cast_fu_680_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                data_in_address0 <= tmp_12_cast_fu_608_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                data_in_address0 <= tmp_15_cast_fu_558_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                data_in_address0 <= tmp_9_cast_fu_463_p1(5 - 1 downto 0);
            else 
                data_in_address0 <= "XXXXX";
            end if;
        else 
            data_in_address0 <= "XXXXX";
        end if; 
    end process;


    data_in_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tmp_13_cast_fu_478_p1, tmp_10_cast_fu_524_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, tmp_16_cast_fu_632_p1, ap_block_pp0_stage3, tmp_14_cast_fu_684_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                data_in_address1 <= tmp_14_cast_fu_684_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                data_in_address1 <= tmp_16_cast_fu_632_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                data_in_address1 <= tmp_10_cast_fu_524_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                data_in_address1 <= tmp_13_cast_fu_478_p1(5 - 1 downto 0);
            else 
                data_in_address1 <= "XXXXX";
            end if;
        else 
            data_in_address1 <= "XXXXX";
        end if; 
    end process;


    data_in_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            data_in_ce0 <= ap_const_logic_1;
        else 
            data_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_in_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            data_in_ce1 <= ap_const_logic_1;
        else 
            data_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    data_out_address0 <= tmp_12_cast_reg_1100(5 - 1 downto 0);

    data_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            data_out_ce0 <= ap_const_logic_1;
        else 
            data_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_out_d0 <= 
        result_3_2_2_i_fu_870_p2 when (p_i1_reg_1229(0) = '1') else 
        result_2_2_1_i_reg_1256;

    data_out_we0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_974_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond_flatten_reg_974_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            data_out_we0 <= ap_const_logic_1;
        else 
            data_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_341_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_280_p4 = ap_const_lv5_19) else "0";
    exitcond_fu_353_p2 <= "1" when (ap_phi_mux_x_assign_1_phi_fu_302_p4 = ap_const_lv3_5) else "0";
    indvar_flatten_next_fu_347_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_280_p4) + unsigned(ap_const_lv5_1));

    kernel_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                kernel_address0 <= ap_const_lv64_8(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                kernel_address0 <= ap_const_lv64_6(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_address0 <= ap_const_lv64_4(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_address0 <= ap_const_lv64_2(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                kernel_address0 <= ap_const_lv64_0(4 - 1 downto 0);
            else 
                kernel_address0 <= "XXXX";
            end if;
        else 
            kernel_address0 <= "XXXX";
        end if; 
    end process;


    kernel_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                kernel_address1 <= ap_const_lv64_7(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_address1 <= ap_const_lv64_5(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_address1 <= ap_const_lv64_3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                kernel_address1 <= ap_const_lv64_1(4 - 1 downto 0);
            else 
                kernel_address1 <= "XXXX";
            end if;
        else 
            kernel_address1 <= "XXXX";
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            kernel_ce1 <= ap_const_logic_1;
        else 
            kernel_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond1_i1_fu_738_p2 <= (tmp_i4_mid2_reg_1015 and tmp_9_i_reg_1051);
    or_cond1_i_fu_514_p2 <= (tmp_i_mid2_reg_1001 and tmp_9_i_fu_509_p2);
    p_i1_fu_790_p2 <= (tmp_i4_mid2_reg_1015 and tmp_1_i4_reg_1115);
    p_i_fu_623_p2 <= (tmp_i_mid2_reg_1001 and tmp_1_i4_fu_618_p2);
        p_shl1_cast_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_387_p3),6));

    p_shl2_cast_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_492_p3),6));
    p_shl_cast_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_582_p3),6));
    result_2_0_1_i_fu_706_p3 <= 
        result_3_0_1_i_fu_701_p2 when (tmp_i_mid2_reg_1001(0) = '1') else 
        ap_const_lv32_0;
    result_2_0_2_i_fu_761_p3 <= 
        result_3_0_2_i_fu_757_p2 when (p_i_reg_1122(0) = '1') else 
        result_2_0_1_i_reg_1177;
    result_2_1_2_i_fu_822_p3 <= 
        result_3_1_2_i_fu_817_p2 when (tmp_1_i4_reg_1115(0) = '1') else 
        result_3_1_1_i_fu_812_p2;
    result_2_1_i_fu_806_p3 <= 
        result_3_1_i_fu_802_p2 when (tmp_9_i_reg_1051(0) = '1') else 
        result_2_0_2_i_reg_1213;
    result_2_2_1_i_fu_859_p3 <= 
        result_3_2_1_i_fu_854_p2 when (tmp_i4_mid2_reg_1015_pp0_iter1_reg(0) = '1') else 
        result_2_1_2_i_reg_1239;
    result_2_2_i_fu_848_p3 <= 
        result_3_2_i_fu_844_p2 when (or_cond1_i1_reg_1198(0) = '1') else 
        result_2_1_2_i_reg_1239;
    result_2_i_fu_695_p3 <= 
        tmp_7_i_reg_1147 when (or_cond1_i_reg_1058(0) = '1') else 
        ap_const_lv32_0;
    result_3_0_1_i_fu_701_p2 <= std_logic_vector(unsigned(tmp_7_0_1_i_reg_1152) + unsigned(result_2_i_fu_695_p3));
    result_3_0_2_i_fu_757_p2 <= std_logic_vector(unsigned(tmp_7_0_2_i_reg_1183) + unsigned(result_2_0_1_i_reg_1177));
    result_3_1_1_i_fu_812_p2 <= std_logic_vector(unsigned(tmp_7_1_1_i_reg_1219) + unsigned(result_2_1_i_fu_806_p3));
    result_3_1_2_i_fu_817_p2 <= std_logic_vector(unsigned(tmp_7_1_2_i_reg_1224) + unsigned(result_3_1_1_i_fu_812_p2));
    result_3_1_i_fu_802_p2 <= std_logic_vector(unsigned(tmp_7_1_i_reg_1188) + unsigned(result_2_0_2_i_reg_1213));
    result_3_2_1_i_fu_854_p2 <= std_logic_vector(unsigned(tmp_7_2_1_i_reg_1251) + unsigned(result_2_2_i_fu_848_p3));
    result_3_2_2_i_fu_870_p2 <= std_logic_vector(unsigned(tmp_7_2_2_i_reg_1262) + unsigned(result_2_2_1_i_reg_1256));
    result_3_2_i_fu_844_p2 <= std_logic_vector(unsigned(tmp_7_2_i_reg_1246) + unsigned(result_2_1_2_i_reg_1239));
    tmp_10_cast_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_519_p2),64));
    tmp_10_fu_472_p2 <= std_logic_vector(unsigned(tmp_6_0_1_cast_fu_468_p1) + unsigned(tmp_5_fu_399_p2));
    tmp_11_cast_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_reg_1095),64));
    tmp_11_fu_613_p2 <= std_logic_vector(unsigned(tmp_6_0_1_cast_reg_1034) + unsigned(tmp_8_fu_593_p2));
    tmp_12_cast_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_604_p2),64));
    tmp_12_fu_553_p2 <= std_logic_vector(unsigned(tmp_6_0_2_cast_fu_549_p1) + unsigned(tmp_5_reg_996));
        tmp_13_cast_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_472_p2),64));

    tmp_13_fu_628_p2 <= std_logic_vector(unsigned(tmp_6_0_2_cast_reg_1084) + unsigned(tmp_3_reg_1045));
    tmp_14_cast_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_reg_1110),64));
    tmp_14_fu_637_p2 <= std_logic_vector(unsigned(tmp_6_0_2_cast_reg_1084) + unsigned(tmp_8_fu_593_p2));
        tmp_15_cast_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_553_p2),64));

    tmp_16_cast_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_628_p2),64));
    tmp_17_cast_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_reg_1132),64));
    tmp_1_fu_582_p3 <= (tmp_2_2_mid2_reg_1009 & ap_const_lv2_0);
    tmp_1_i4_fu_618_p2 <= "1" when (unsigned(x_reg_1078) < unsigned(ap_const_lv3_5)) else "0";
    tmp_2_2_mid2_cast_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_2_mid2_reg_1009),6));
    tmp_2_2_mid2_fu_425_p3 <= 
        y_assign_2_mid1_fu_419_p2 when (exitcond_fu_353_p2(0) = '1') else 
        y_fu_329_p2;
    tmp_3_fu_503_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_499_p1) + unsigned(tmp_mid2_cast_fu_489_p1));
    tmp_4_fu_387_p3 <= (tmp_4_mid2_v_fu_375_p3 & ap_const_lv2_0);
        tmp_4_mid2_cast_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_mid2_v_fu_375_p3),6));

    tmp_4_mid2_v_fu_375_p3 <= 
        ap_phi_mux_y_assign_1_phi_fu_291_p4 when (exitcond_fu_353_p2(0) = '1') else 
        y_assign_fu_317_p2;
    tmp_5_fu_399_p2 <= std_logic_vector(signed(p_shl1_cast_fu_395_p1) + signed(tmp_4_mid2_cast_fu_383_p1));
    tmp_6_0_1_cast_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_assign_1_mid2_fu_359_p3),6));
    tmp_6_0_2_cast_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_fu_544_p2),6));
        tmp_6_cast_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_assign_fu_447_p2),6));

    tmp_6_fu_599_p2 <= std_logic_vector(signed(tmp_6_cast_reg_1023) + signed(tmp_8_fu_593_p2));
    tmp_7_0_1_i_fu_662_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(window_0_1_1_4_reg_1073) * signed(reg_313))), 32));
    tmp_7_0_2_i_fu_713_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(window_0_2_1_5_reg_1137) * signed(reg_309))), 32));
    tmp_7_1_1_i_fu_767_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(window_1_1_reg_1167) * signed(reg_309))), 32));
    tmp_7_1_2_i_fu_772_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(window_1_2_1_7_reg_1172) * signed(reg_313))), 32));
    tmp_7_1_i_fu_718_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(window_1_0_1_6_reg_1142) * signed(reg_313))), 32));
    tmp_7_2_1_i_fu_834_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(window_2_1_1_9_reg_1208) * signed(reg_313))), 32));
    tmp_7_2_2_i_fu_865_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(window_2_2_1_10_reg_1234) * signed(reg_309))), 32));
    tmp_7_2_i_fu_829_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(window_2_0_1_8_reg_1203) * signed(reg_309))), 32));
    tmp_7_fu_604_p2 <= std_logic_vector(unsigned(tmp_6_0_1_cast_reg_1034) + unsigned(tmp_3_reg_1045));
    tmp_7_i_fu_657_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(window_0_0_1_3_reg_1068) * signed(reg_309))), 32));
    tmp_8_fu_593_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_589_p1) + unsigned(tmp_2_2_mid2_cast_fu_579_p1));
        tmp_9_cast_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_fu_457_p2),64));

    tmp_9_fu_457_p2 <= std_logic_vector(signed(tmp_6_cast_fu_453_p1) + signed(tmp_5_fu_399_p2));
    tmp_9_i_fu_509_p2 <= "0" when (x_assign_1_mid2_reg_983 = ap_const_lv3_0) else "1";
    tmp_fu_492_p3 <= (tmp_mid2_reg_989 & ap_const_lv2_0);
    tmp_i4_fu_335_p2 <= "1" when (unsigned(y_fu_329_p2) < unsigned(ap_const_lv3_5)) else "0";
    tmp_i4_mid1_fu_433_p2 <= "1" when (unsigned(y_assign_2_mid1_fu_419_p2) < unsigned(ap_const_lv3_5)) else "0";
    tmp_i4_mid2_fu_439_p3 <= 
        tmp_i4_mid1_fu_433_p2 when (exitcond_fu_353_p2(0) = '1') else 
        tmp_i4_fu_335_p2;
    tmp_i_fu_323_p2 <= "0" when (ap_phi_mux_y_assign_1_phi_fu_291_p4 = ap_const_lv3_0) else "1";
    tmp_i_mid1_fu_405_p2 <= "0" when (y_fu_329_p2 = ap_const_lv3_0) else "1";
    tmp_i_mid2_fu_411_p3 <= 
        tmp_i_mid1_fu_405_p2 when (exitcond_fu_353_p2(0) = '1') else 
        tmp_i_fu_323_p2;
    tmp_mid2_cast_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid2_reg_989),6));
    tmp_mid2_fu_367_p3 <= 
        y_fu_329_p2 when (exitcond_fu_353_p2(0) = '1') else 
        ap_phi_mux_y_assign_1_phi_fu_291_p4;
    tmp_s_fu_519_p2 <= std_logic_vector(signed(tmp_6_cast_reg_1023) + signed(tmp_3_fu_503_p2));
    window_0_0_1_3_fu_529_p3 <= 
        data_in_q0 when (or_cond1_i_fu_514_p2(0) = '1') else 
        window_0_0_1_fu_74;
    window_0_1_1_4_fu_537_p3 <= 
        data_in_q1 when (tmp_i_mid2_reg_1001(0) = '1') else 
        window_0_1_1_fu_78;
    window_0_2_1_5_fu_642_p3 <= 
        data_in_q0 when (p_i_fu_623_p2(0) = '1') else 
        window_0_2_1_fu_82;
    window_1_0_1_6_fu_650_p3 <= 
        data_in_q1 when (tmp_9_i_reg_1051(0) = '1') else 
        window_1_0_1_fu_86;
    window_1_2_1_7_fu_688_p3 <= 
        data_in_q1 when (tmp_1_i4_reg_1115(0) = '1') else 
        window_1_2_1_fu_90;
    window_2_0_1_8_fu_742_p3 <= 
        data_in_q0 when (or_cond1_i1_fu_738_p2(0) = '1') else 
        window_2_0_1_fu_94;
    window_2_1_1_9_fu_750_p3 <= 
        data_in_q1 when (tmp_i4_mid2_reg_1015(0) = '1') else 
        window_2_1_1_fu_98;
    window_2_2_1_10_fu_794_p3 <= 
        data_in_q0 when (p_i1_fu_790_p2(0) = '1') else 
        window_2_2_1_fu_102;
    x_assign_1_mid2_fu_359_p3 <= 
        ap_const_lv3_0 when (exitcond_fu_353_p2(0) = '1') else 
        ap_phi_mux_x_assign_1_phi_fu_302_p4;
    x_assign_fu_447_p2 <= std_logic_vector(unsigned(x_assign_1_mid2_fu_359_p3) + unsigned(ap_const_lv3_7));
    x_fu_544_p2 <= std_logic_vector(unsigned(x_assign_1_mid2_reg_983) + unsigned(ap_const_lv3_1));
    y_assign_2_mid1_fu_419_p2 <= std_logic_vector(unsigned(ap_phi_mux_y_assign_1_phi_fu_291_p4) + unsigned(ap_const_lv3_2));
    y_assign_fu_317_p2 <= std_logic_vector(unsigned(ap_phi_mux_y_assign_1_phi_fu_291_p4) + unsigned(ap_const_lv3_7));
    y_fu_329_p2 <= std_logic_vector(unsigned(ap_phi_mux_y_assign_1_phi_fu_291_p4) + unsigned(ap_const_lv3_1));
end behav;
